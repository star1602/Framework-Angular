{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CalculadoraComponent = class CalculadoraComponent {\n  constructor() {\n    this.numeroActual = 0;\n    this.numeroAnterior = 0;\n    this.operador = '';\n    this.resultado = 0;\n    this.operaciones = ['+', '-', '*', '/'];\n    this.salida = '';\n  }\n  agregar(valor) {\n    if (this.operaciones.includes(valor)) {\n      this.operador = valor;\n      this.numeroActual = Number(this.salida.substring(2));\n      this.salida = this.salida + valor;\n    } else if (valor === '=') {\n      console.log(this.salida.split(this.operador)[1].substring(2));\n      this.numeroAnterior = Number(this.salida.split(this.operador)[1].substring(2));\n      this.calcular();\n    } else if (valor === 'C') {\n      this.limpiar();\n    } else if (this.salida === '') {\n      this.salida = \"S/\" + valor;\n    } else if (this.salida[this.salida.length - 1] === this.operador) {\n      this.salida = this.salida + \"S/\" + valor;\n    } else {\n      this.salida = this.salida + valor;\n    }\n  }\n  calcular() {\n    switch (this.operador) {\n      case '+':\n        this.resultado = this.numeroActual + this.numeroAnterior;\n        break;\n      case '-':\n        this.resultado = this.numeroActual - this.numeroAnterior;\n        break;\n      case '*':\n        this.resultado = this.numeroActual * this.numeroAnterior;\n        break;\n      case '/':\n        this.resultado = this.numeroActual / this.numeroAnterior;\n        break;\n    }\n    this.salida = \"S/\" + this.resultado.toString();\n    console.log(this.numeroActual, this.numeroAnterior, this.operador, this.resultado);\n  }\n  limpiar() {\n    this.salida = '';\n  }\n};\nCalculadoraComponent = __decorate([Component({\n  selector: 'app-calculadora',\n  templateUrl: './calculadora.component.html',\n  styleUrls: ['./calculadora.component.css']\n})], CalculadoraComponent);\nexport { CalculadoraComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAA1BC;IACG,iBAAY,GAAW,CAAC;IACxB,mBAAc,GAAW,CAAC;IAC1B,aAAQ,GAAW,EAAE;IACrB,cAAS,GAAW,CAAC;IACrB,gBAAW,GAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACpD,WAAM,GAAW,EAAE;EAiDrB;EA/CEC,OAAO,CAACC,KAAa;IACnB,IAAI,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;MACpC,IAAI,CAACG,QAAQ,GAAGH,KAAK;MACrB,IAAI,CAACI,YAAY,GAAGC,MAAM,CAAC,IAAI,CAACC,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;MACpD,IAAI,CAACD,MAAM,GAAG,IAAI,CAACA,MAAM,GAAGN,KAAK;KAClC,MACI,IAAIA,KAAK,KAAK,GAAG,EAAE;MACtBQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,MAAM,CAACI,KAAK,CAAC,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;MAC7D,IAAI,CAACI,cAAc,GAAGN,MAAM,CAAC,IAAI,CAACC,MAAM,CAACI,KAAK,CAAC,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;MAC9E,IAAI,CAACK,QAAQ,EAAE;KAChB,MACI,IAAIZ,KAAK,KAAK,GAAG,EAAE;MACtB,IAAI,CAACa,OAAO,EAAE;KACf,MACI,IAAI,IAAI,CAACP,MAAM,KAAK,EAAE,EAAE;MAC3B,IAAI,CAACA,MAAM,GAAG,IAAI,GAAGN,KAAK;KAC3B,MACI,IAAI,IAAI,CAACM,MAAM,CAAC,IAAI,CAACA,MAAM,CAACQ,MAAM,GAAC,CAAC,CAAC,KAAK,IAAI,CAACX,QAAQ,EAAE;MAC5D,IAAI,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM,GAAG,IAAI,GAAGN,KAAK;KACzC,MACI;MACH,IAAI,CAACM,MAAM,GAAG,IAAI,CAACA,MAAM,GAAGN,KAAK;;EAErC;EAEAY,QAAQ;IACN,QAAQ,IAAI,CAACT,QAAQ;MACnB,KAAK,GAAG;QACN,IAAI,CAACY,SAAS,GAAG,IAAI,CAACX,YAAY,GAAG,IAAI,CAACO,cAAc;QACxD;MACF,KAAK,GAAG;QACN,IAAI,CAACI,SAAS,GAAG,IAAI,CAACX,YAAY,GAAG,IAAI,CAACO,cAAc;QACxD;MACF,KAAK,GAAG;QACN,IAAI,CAACI,SAAS,GAAG,IAAI,CAACX,YAAY,GAAG,IAAI,CAACO,cAAc;QACxD;MACF,KAAK,GAAG;QACN,IAAI,CAACI,SAAS,GAAG,IAAI,CAACX,YAAY,GAAG,IAAI,CAACO,cAAc;QACxD;IAAM;IAEV,IAAI,CAACL,MAAM,GAAG,IAAI,GAAG,IAAI,CAACS,SAAS,CAACC,QAAQ,EAAE;IAC9CR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,YAAY,EAAE,IAAI,CAACO,cAAc,EAAE,IAAI,CAACR,QAAQ,EAAE,IAAI,CAACY,SAAS,CAAC;EACpF;EAEAF,OAAO;IACL,IAAI,CAACP,MAAM,GAAG,EAAE;EAClB;CACD;AAvDYT,oBAAoB,eALhCD,SAAS,CAAC;EACTqB,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWtB,oBAAoB,CAuDhC;SAvDYA,oBAAoB","names":["Component","CalculadoraComponent","constructor","agregar","valor","operaciones","includes","operador","numeroActual","Number","salida","substring","console","log","split","numeroAnterior","calcular","limpiar","length","resultado","toString","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\USUARIO\\Documents\\GitHub\\Framework-Angular-Certus\\AppCalculadora-main\\src\\app\\calculadora\\calculadora.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-calculadora',\n  templateUrl: './calculadora.component.html',\n  styleUrls: ['./calculadora.component.css']\n})\nexport class CalculadoraComponent {\n  private numeroActual: number = 0;\n  private numeroAnterior: number = 0;\n  private operador: string = '';\n  private resultado: number = 0;\n  private operaciones: string[] = ['+', '-', '*', '/'];\n  salida: string = '';\n\n  agregar(valor: string): void {\n    if (this.operaciones.includes(valor)) {\n      this.operador = valor;\n      this.numeroActual = Number(this.salida.substring(2));\n      this.salida = this.salida + valor;\n    } \n    else if (valor === '=') {\n      console.log(this.salida.split(this.operador)[1].substring(2));\n      this.numeroAnterior = Number(this.salida.split(this.operador)[1].substring(2));\n      this.calcular();\n    } \n    else if (valor === 'C') {\n      this.limpiar();\n    }\n    else if (this.salida === '') {\n      this.salida = \"S/\" + valor;\n    }\n    else if (this.salida[this.salida.length-1] === this.operador) {\n      this.salida = this.salida + \"S/\" + valor;\n    }\n    else {\n      this.salida = this.salida + valor;\n    }\n  }\n\n  calcular(): void {\n    switch (this.operador) {\n      case '+':\n        this.resultado = this.numeroActual + this.numeroAnterior;\n        break;\n      case '-':\n        this.resultado = this.numeroActual - this.numeroAnterior;\n        break;\n      case '*':\n        this.resultado = this.numeroActual * this.numeroAnterior;\n        break;\n      case '/':\n        this.resultado = this.numeroActual / this.numeroAnterior;\n        break;\n    }\n    this.salida = \"S/\" + this.resultado.toString();\n    console.log(this.numeroActual, this.numeroAnterior, this.operador, this.resultado);\n  }\n\n  limpiar(): void {\n    this.salida = '';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}